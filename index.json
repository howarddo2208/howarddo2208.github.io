[{"content":"Today I wrote a script to quickly search, delete and add new tmux session with the power of fzf.\nThe script The --bind flag of fzf took me quite some time to debug because of many escape backslashes I needed to add.\n#!/bin/bash # ~/.local/bin/tmux-session-manager FIND_DEFAULT_COMMAND=\u0026#34;tmux list-sessions | sed -E \u0026#39;s/:.*$//\u0026#39; | grep -v \\\u0026#34;^$(tmux display-message -p \u0026#39;#S\u0026#39;)\\$\\\u0026#34;\u0026#34; tmux list-sessions | sed -E \u0026#39;s/:.*$//\u0026#39; | grep -v \u0026#34;^$(tmux display-message -p \u0026#39;#S\u0026#39;)$\u0026#34;\\ | fzf --reverse --bind \u0026#34;ctrl-x:execute(tmux kill-session -t {})+reload(${FIND_DEFAULT_COMMAND})\u0026#34;\\ --bind \u0026#34;ctrl-n:execute(bash -c \u0026#39;read -p \\\u0026#34;Name: \\\u0026#34; name; tmux new -d -s \\\u0026#34;\\$name\\\u0026#34;\u0026#39;)+reload(${FIND_DEFAULT_COMMAND})\u0026#34; \\ --bind \u0026#34;ctrl-r:reload(${FIND_DEFAULT_COMMAND})\u0026#34;\\ --header \u0026#39;Enter: switch session | Ctrl-X: kill session | Ctrl-N: new session | Ctrl-R: refresh list\u0026#39;\\ | xargs tmux switch-client -t And I bind it into s key to overwrite the default tmux behavior.\n# tmux.conf bind s display-popup -E \u0026#34;tmux-session-manager\u0026#34; Result Hope you find this useful!\n","permalink":"https://howarddo2208.github.io/posts/04-fzf-tmux-session-manager/","summary":"Today I wrote a script to quickly search, delete and add new tmux session with the power of fzf.\nThe script The --bind flag of fzf took me quite some time to debug because of many escape backslashes I needed to add.\n#!/bin/bash # ~/.local/bin/tmux-session-manager FIND_DEFAULT_COMMAND=\u0026#34;tmux list-sessions | sed -E \u0026#39;s/:.*$//\u0026#39; | grep -v \\\u0026#34;^$(tmux display-message -p \u0026#39;#S\u0026#39;)\\$\\\u0026#34;\u0026#34; tmux list-sessions | sed -E \u0026#39;s/:.*$//\u0026#39; | grep -v \u0026#34;^$(tmux display-message -p \u0026#39;#S\u0026#39;)$\u0026#34;\\ | fzf --reverse --bind \u0026#34;ctrl-x:execute(tmux kill-session -t {})+reload(${FIND_DEFAULT_COMMAND})\u0026#34;\\ --bind \u0026#34;ctrl-n:execute(bash -c \u0026#39;read -p \\\u0026#34;Name: \\\u0026#34; name; tmux new -d -s \\\u0026#34;\\$name\\\u0026#34;\u0026#39;)+reload(${FIND_DEFAULT_COMMAND})\u0026#34; \\ --bind \u0026#34;ctrl-r:reload(${FIND_DEFAULT_COMMAND})\u0026#34;\\ --header \u0026#39;Enter: switch session | Ctrl-X: kill session | Ctrl-N: new session | Ctrl-R: refresh list\u0026#39;\\ | xargs tmux switch-client -t And I bind it into s key to overwrite the default tmux behavior.","title":"Fzf Tmux Session Manager"},{"content":"Snippet manager is not something I pay attention to until recently, but when I do, I want to make it blend into my workflow smoothly. I will share my tool and process in this blog\nThe tool Nap is the tool of choice for me. It runs on the terminal, have a nice terminal UI. I don\u0026rsquo;t really like GUI solutions as they are not accessible while I\u0026rsquo;m coding, and I need to alt-Tab to search for my snippets. So read the nap\u0026rsquo;s README, give it a try, store some snippets and initialize a git repo for them.\nIntegrate nap into my workflow Currently, I\u0026rsquo;m using Neovim and Tmux for coding, so I want a keybindings to trigger the fuzzy finding for the snippets then. Here\u0026rsquo;s a minimal script for this in tmux.conf. You need fzf installed for this\nbind s display-popup -E \u0026#34;nap $(nap list | fzf) | pbcopy\u0026#34; Replace the s key for whatever key you want, and replace pbcopy by xclip -selection clipboard if you are on Linux (not sure tho). Now \u0026lt;prefix\u0026gt;+s should work for you!\nBut I want my search to have code preview and be more customizable, so here\u0026rsquo;s my script and I store it inside ~/.local/bin and I give it executable permission\n# ~/.local/bin/napfzf find \u0026#34;$NAP_HOME\u0026#34; -type f ! -name \u0026#34;snippets.json\u0026#34; \\ | fzf --delimiter / --with-nth -1 --preview \u0026#34;bat --color=always {}\u0026#34;\\ --bind \u0026#34;enter:execute($EDITOR {})+abort\u0026#34; --bind \u0026#34;ctrl-y:execute-silent(cat {} | pbcopy)+abort\u0026#34;\\ --header \u0026#39;Press CTRL-y to yank snippet into clipboard\u0026#39; # tmux.conf # I give the popup bigger size here for the code preview bind s display-popup -h 80% -w 80% -E \u0026#34;napfzf\u0026#34; Here you need $NAP_HOME environment set which point to the snippet directory, I use bat for code preview with syntax highlighting. When you press enter it will open in your default text editor $EDTITOR (in my case it is nvim), and Ctrl-y to copy the snippet\nHere\u0026rsquo;s the result Conclusion Here\u0026rsquo;s how I manage my snippets for now, maybe I will create a key bind for creating snippet in nap when using Tmux, but now I don\u0026rsquo;t see it\u0026rsquo;s necessary.\n","permalink":"https://howarddo2208.github.io/posts/03-how-i-manage-snippets/","summary":"Snippet manager is not something I pay attention to until recently, but when I do, I want to make it blend into my workflow smoothly. I will share my tool and process in this blog\nThe tool Nap is the tool of choice for me. It runs on the terminal, have a nice terminal UI. I don\u0026rsquo;t really like GUI solutions as they are not accessible while I\u0026rsquo;m coding, and I need to alt-Tab to search for my snippets.","title":"How I Manage Snippets"},{"content":"This is the first post in the series documenting how I use Nix to manage my development environment, hope you can learn a thing or two.\nWhy Nix? I first came across Nix from a YouTube video of Mental Outlaw and was fascinated to learn that I can use Nix to quickly migrate development environment to other machines, pretty awesome, right? But Nix got quite a steep learning curve, so today I will only show you how to get started using Nix and replace your existing package manager. And we will explore further in later posts.\nOne thing I don\u0026rsquo;t like about Homebrew is it mixes up the packages you install with their dependencies when calling brew list. It\u0026rsquo;s not the case with nix though, Nix only lists out what you explicitly tell it to install many of the listed packages are just dependencies\nAdditionally, Nix has a massive number of packages and works on both macOS, Linux and Windows WSL.\nrepository size comparisonnixpkgs unstable and stable sit at the top. See more at: https://repology.org/repositories/graphs Start using nix Now if you are convinced to use Nix, let\u0026rsquo;s get started. Just head over to their website and follow the installation instructions. Then we will start with the most basic commands: nix-shell and nix-env.\nNix-shell think of it as a shell that you can experiment with all the packages you want to try but not intending to install yet. A quick command to pull packages and then experiment with them is nix-shell -p \u0026lt;pkg-1\u0026gt; \u0026lt;pkg-2\u0026gt;. This will launch a bash shell which only contains packages you listed. When you are done with the experiment, press Ctrl+D or execute exit to get out of the shell.\nTo search for a package, the easiest way is to head to https://search.nixos.org/ and choose the unstable channel for the latest package version.\nnix-shell exampleas you can see, cowsay is only available while we are in nix-shell\nLater, if you want to remove the unused package, run nix-collect-garbage\nNix-env When it comes to permanently modifying the local profile of packages, you use nix-env, just like normal Homebrew. I\u0026rsquo;ll just cut to the chase and give you some examples of basic package management here, you can read more information in the official documentation :\nsearch for package: nix-env -qaP neovim install package: nix-env -iA nixpkgs.neovim remove package: nix-env -e neovim upgrade a package: nix-env -uA nixpkgs.neovim, upgrade all packages: nix-env -u A quick way you can install is just to head to the search site that I mentioned before, search for the package you want, and copy the script to install to your terminal. Remember pick unstable channel and nix-env script, though.\nsearch and install package Replace Homebrew with Nix That\u0026rsquo;s it, now you know how to use nix to install your packages. But if you are using Homebrew and want to migrate away from it, then what I recommend is to list all the packages you use with brew list, then write down the packages you want to migrate, search and install them on Nix, and finally uninstall it from Homebrew with see more at stackoverflow $ brew tap beeftornado/rmtree $ brew rmtree \u0026lt;package\u0026gt; One more thing I would like to mention is that not every package on Homebrew is also on Nix, especially those macOS-only GUI apps. So, you may want to keep using Homebrew too, I wrote this post to help you get familiar with Nix first before the next step, using Nix and Home Manager to manage your development environment across machines. If you want to see more, follow me on Twitter to get notified when I drop it.\nIf I got anything wrong, feel free to correct me down below! I\u0026rsquo;m still new to Nix and just want to write this to help anyone who comes after me get started. English is also not my first language, so don\u0026rsquo;t go too hard on me, please ðŸ˜… Thank you for reading!\n","permalink":"https://howarddo2208.github.io/posts/02-nix-beginner-guide/","summary":"This is the first post in the series documenting how I use Nix to manage my development environment, hope you can learn a thing or two.\nWhy Nix? I first came across Nix from a YouTube video of Mental Outlaw and was fascinated to learn that I can use Nix to quickly migrate development environment to other machines, pretty awesome, right? But Nix got quite a steep learning curve, so today I will only show you how to get started using Nix and replace your existing package manager.","title":"A beginner guide to Nix, the best package manager"},{"content":"Hi, welcome to my first blog, in this article I will list out all the tech that I use daily with my Macbook and Android phone. I hope that you can find something useful in this curated list and use them in your setup.\nI\u0026rsquo;m a poor boy in a third-world country, so my setup would include many free, pirated stuffs, don\u0026rsquo;t arrest me please :P\nAll the tech listed here will be updated over time when I found better alternatives or add something new\ndevelopment tools Node.js: I\u0026rsquo;m a typescript developer so I will list some tools related to it\nnodejs version manager - fnm : I find this perform better that nvm I used before, and it is written in Rust too, so of course it is blazingly fast! :D\npnpm : fasted node package manager I know to date\ncode editor\nNeovim is my main code editor. If you find neovim hard to get started, you can consider using NvChad , LunarVim or any other preconfiged neovim setup\nVisual Studio Code Terminal setup:\nhere is my dotfiles , have a look! My terminal setup highly revolves around zsh shell, neovim config and tmux (a terminal multiplexer).\nTerminal Emulator - Wezterm : I choose this over allacritty, kitty and iTerm because it support all platforms and got nice feature right out of a box like copy mode without mouse, etc\nsome other useful terminal stuffs here\ncheat.sh: the only cheat sheet you need lazygit: simple terminal UI for git commands Docker : quickly setup dev environment with image and containers\nngrok : for sharing localhost ports (I rarely use it)\nproductivity personal knowledge management - logseq + Notion : I think there is no need to talk about notion because you probably knew about it already, but Logseq is the best app I\u0026rsquo;ve ever used to take notes, manage my knowledge and everything in my life. Its block approach makes it really easy to connect existing data, and ideas in your graph together, and it is open-source with a big collection of tutorials/plugins for its user base too. The data are fully managed by you. I highly recommend you try it. peer-to-peer syncing: Syncthing : One caveat of using logseq is that if you don\u0026rsquo;t spend money to support the current development, you have to find your own way to sync data. So many people turn to this app to sync their data, after using it for a while, now I think it is the best syncing app out there, it use P2P network and not store your data on any of the cloud service. Right now I use it to sync my logseq graph and downloaded musics, videos, series, etc between my phone and laptop.\ntranslator: Reverso flashcards: Anki + logseq flashcards feature\nvideo editor - DaVinci Resolve : the free version is good. I don\u0026rsquo;t want to pay for expensive Adobe apps at all\nsites, appblocker\nMobile - Stay Focused : I find this especially useful to limit my phone usage, if you want to buy it, there is a lifetime plan, no more annoying subscription plan. It got an iOS app too, but I don\u0026rsquo;t have a iPhone to test it\nMac - Self Control : free and open source website blocker for macOS, once you decide to block a website, you can\u0026rsquo;t revert the action no matter what.\nbook + article reader + highlight reviewer - Readwise and Reader : amazing combo to read and review your highlights, covered under 1 subscription. If you are in a 3rd world country like me or you are a student, you can email them to get a big discount too.\nscheduler, time blocking day: Google Calendar + Cron Todo app + Pomodoro timer - Focus To-do : supports all platforms (no Linux desktop client, but you can install it as Chrome extension), PRO version is 1-time payment and it is good enough.\ntime tracker for freelance: Toggl Track password manager - Bitwarden : open-source and reliable password manager, its free tier is enough for personal usage.\nAI assistant client - ChatGPT Desktop Application + Poe : Poe is really fast and support multiple AI model, and if you want to open ChatGPT as an app, download the client for desktop on github\nMedias and entertainment In this section, I will introduce you to all the free solutions so you can get rid of your subscription service and live like a cheapskate like I am XD\nmovies and series streaming\nStremio : my main source of movies/series streaming. You can install straight at the app store but after you need to install the hidden addons to access variety of torrent streams.\nhidden addons : best one are torentino and the pirate bay. Install trakt addon if wanting to track your history. Cloudstream : android only, I just discovered it and it seems nice, got the download functionality out of the box, but I will stick with Stremio because of the trakt itegration\nmusic\nI mainly use adblocked Spotify\ndesktop: SpotX: Modified Spotify client. Blocks ads and updates android xManager : install, manage and update ad-free Spotify for android\nmusic downloader - SpotiFlyer : download audio from various sources, I use it along with Music Player \u0026amp;amp; MP3 Player videos\nyoutube client - NewPipe - minimal, free and open-source client to get ad-free youtube + other features. If you want to have google account built in, you should look into revanced as the old youtube vanced just got shutdown by google.\nvideo downloader - dvd + Seal : both are open-source GUI downloader powered by yt-dlp , best tool to download videos from youtube\nmanga - Tachiyomi : Android app to read manga pulled from multiple sources by installing additional extensions\nbooks - Anna\u0026#39;s Archive : Search engine of shadow libraries: books, papers, comics, magazines. After the public website of Zlib got shutdown, I discovered this and it is amazing\naudiobooks - audiobookbay : best source of free audiobooks, I use it with Smart Audiobook Player on android\nOther mac apps Pastebot : I find this especially useful when copying multiple code snippets with the sequential copy/paste feature, but it is a paid app and for mac only. I will add a link to windows/linux alternative if I find one\nhide excess menu bar icons: hidden : if you have too many menu bar icons, this free app can help you, if you got some money, you can consider getting Bartender as I heard it is better\nkeyboard mappers: Karabiner-Elements quick file transfer, sharing with drag and drop drawer - Dropover : I bought it by 1-time payment, really useful. Another alternative I heard is DropZone, you can try it out\nbetter screenshot capture - Shottr : way better than default capture, if you got money then pay for CleanShotX is the best\ncustom launcher, spotlight replacement - Raycast : highly recommend for any mac user, you can assign custom hotkey, install plugins to add more functionality to your existing Spotlight\n","permalink":"https://howarddo2208.github.io/posts/01-my-tech-setup-as-a-poor-developer/","summary":"Hi, welcome to my first blog, in this article I will list out all the tech that I use daily with my Macbook and Android phone. I hope that you can find something useful in this curated list and use them in your setup.\nI\u0026rsquo;m a poor boy in a third-world country, so my setup would include many free, pirated stuffs, don\u0026rsquo;t arrest me please :P\nAll the tech listed here will be updated over time when I found better alternatives or add something new","title":"My tech setup as a poor developer"}]